df_norm_2$time = format(df_norm_2$time, format = "%Y%m%d%H")
df_norm_2$region = as.numeric(df_norm_2$region)
#########################################################
str(df_norm_2)
d_train = df_norm_2 %>% filter(time < 2019020101) %>% select(-time, -w_athmprsssr)
d_test = df_norm_2 %>% filter(time >= 2019020101) %>% select(-time, -w_athmprsssr)
str(d_train)
str(d_test)
d_train_2 = df_norm_2 %>% filter(time < 2019020101) %>% select(-time, -w_athmprsssr)
d_test_2 = df_norm_2 %>% filter(time >= 2019020101) %>% select(-time, -w_athmprsssr)
str(d_train_2)
str(d_test_2)
d_train_2_data = d_train_2[-6, -14]
d_train_2_label = d_train_2[14]
d_test_2_data = d_test_2[-6 -14]
d_test_2_label = d_test_2[14]
str(d_train_2_data)
str(d_train_2_label)
dim(d_train_2_data)
dim(d_train_2_label)
str(d_train_2)
summary(d_train_2)
str(d_train_2$region)
str(d_train_2_data)
str(d_train_2)
summary(d_train_2)
str(d_train_2)
d_train_2_data = d_train_2[-6, -14]
d_train_2_label = d_train_2[14]
dim(d_train_2_data)
dim(d_train_2_label)
summary(d_train_2)
str(d_train_2$SO2)
str(d_train_2$CO)
str(d_train_2$O3)
str(d_train_2)
str(d_train_2_data)
str(d_train_2_label)
d_test_2_data = d_test_2[-6, -14]
d_test_2_label = d_test_2[14]
str(d_train_2_data)
str(d_train_2_label)
d_test_2_data = d_test_2[-6, -14]
d_test_2_label = d_test_2[14]
dim(d_test_2_data)
dim(d_test_2_label)
d_train_2_data = d_train_2[c(-6, -14)]
d_train_2_label = d_train_2[14]
d_test_2_data = d_test_2[c(-6, -14)]
d_test_2_label = d_test_2[14]
str(d_train_2_data)
str(d_train_2_label)
# 6
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 11)
str(d_train_2_data)
str(d_train_2_label)
# 6
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 11)
# 6
d_C50 = C5.0(d_train_2_data, d_train_2_label)
# 6
d_C50 = C5.0(d_train_2_data, d_train_2_label)
str(d_train_2_label)
d_train_2_label = as.factor(d_train_2[14])
str(d_train_2_label)
head(d_train_2_label, 10)
d_train_2_label = as.factor(d_train_2$PM10_t)
head(d_train_2_label, 10)
str(d_train_2_label)
str(d_train_2_label)
# 6
d_C50 = C5.0(d_train_2_data, d_train_2_label)
summary(d_C50)
# 6
d_C50 = C5.0(d_train_2_data, d_train_2_label, trials = 10)
summary(d_C50)
d_test_2_label = as.factor(d_train_2$PM10_t)
# 6
d_predict6_C50 = predict(d_C50, d_test_2_data)
# 6
CrossTable(d_test_2_label, d_predict6_C50)
str(d_predict6_C50)
summary(d_predict6_C50)
table(d_predict6_C50)
dim(d_predict6_C50)
table(d_predict6_C50)
table(d_test_2_label)
dim(d_test_2_data)
dim(d_test_2_label)
dim(d_test_2_label)
d_test_2_label = as.factor(d_train_2$PM10_t)
dim(d_test_2_label)
d_test_2_label = as.factor(d_test_2$PM10_t)
dim(d_test_2_label)
str(d_test_2)
dim(d_test_2_data)
d_test_2_data = d_test_2[c(-6, -14)]
dim(d_test_2_data)
d_test_2_label = as.factor(d_test_2$PM10_t)
dim(d_test_2_label)
str(d_test_2)
d_test_2_label = factor(d_test_2$PM10_t)
dim(d_test_2_label)
dim(d_train_2_label)
d_train_2_label = as.factor(d_train_2$PM10_t)
dim(d_train_2_label)
str(d_train_2)
d_train_2_label = d_train_2$PM10_t
dim(d_train_2_label)
d_train_2_label = d_train_2$PM10_t
dim(d_train_2_label)
dim(d_train_2_data)
str(d_train_2_label)
str(d_train_2_data)
d_train_2_label = factor(d_test_2$PM10_t)
d_test_2_label = factor(d_test_2$PM10_t)
table(d_test_2_label)
table(d_predict6_C50)
# 6
CrossTable(d_test_2_label, d_predict6_C50)
# 6
CrossTable(d_test_2_label, d_predict6_C50, prop.chisq = F)
# 7
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 11)
str(d_train_2_data)
str(d_train_2_label)
summary(d_train_2_label)
17226   +  54598 +    14788  +    2622
d_train_2_label = factor(d_train_2$PM10_t)
# 6 Decision Tree
d_C50 = C5.0(d_train_2_data, d_train_2_label, trials = 10)
# 6
d_predict6_C50 = predict(d_C50, d_test_2_data)
# 6
CrossTable(d_test_2_label, d_predict6_C50, prop.chisq = F)
table(d_predict6_C50)
table(d_test_2_label)
# 7
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 11)
# 7
CrossTable(d_test_2_label, d_predict6_knn, prop.chisq = F)
# 7
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 5)
# 7
CrossTable(d_test_2_label, d_predict6_knn, prop.chisq = F)
# 7
d_predict6_knn = knn(train = d_train_2_data,
test = d_test_2_data,
cl = d_train_2_label,
k = 7)
# 7
CrossTable(d_test_2_label, d_predict6_knn, prop.chisq = F)
confusionMatrix(d_test_2_label, d_predict6_knn)
library(e1071)
install.packages('e1071')
library(e1071)
confusionMatrix(d_test_2_label, d_predict6_knn)
confusionMatrix(d_test_2_label, d_predict6_knn,
positive = 'very poor')
install.packages('pROC')
library(pROC)
df_roc = roc(response = d_test_2_label,
predictor =  d_predict6_knn)
df_roc = multiclass.roc(response = d_test_2_label,
predictor =  d_predict6_knn)
df_roc = multiclass.roc(response = d_test_2_label,
predictor =  d_predict6_knn)
df_roc = multiclass.roc(response = d_test_2_label,
predictor =  d_predict6_knn)
str(d_predict6_knn)
str(d_test_2_label)
df_roc_1 = multiclass.roc(response = d_test$PM10,
predictor =  d_predict)
df_roc_1 = multiclass.roc(response = d_test_2_label,
predictor =  d_predict6_knn)
str(d_predict6_knn)
str(d_test_2_label)
df_roc_knn = data.frame(test = d_test_2_label, predict = d_predict6_knn)
str(df_roc_knn)
df_roc_knn = multiclass.roc(response = df_roc_knn$test,
predictor =  df_roc_knn$predict)
df_roc_knn = data.frame(test = d_test_2_label, predict = d_predict6_knn, factor = F)
str(df_roc_knn)
df_roc_knn = data.frame(test = d_test_2_label, predict = d_predict6_knn)
df_roc_knn = as.data.frame(test = d_test_2_label, predict = d_predict6_knn)
df_roc_knn = multiclass.roc(response = df_roc_knn$test,
predictor =  df_roc_knn$predict)
str(df_roc_knn)
pm_data_19_1 = read_xlsx('project/data/2019/2019년 1월.xlsx')
pm_data_19_1 = read_xlsx('project/data/2019/2019년 1월.xlsx')
knitr::opts_chunk$set(echo=F, fig.align = "center", message=F, warning=F, fig.height = 8, cache=T, dpi = 300, dev = "jpg")
pm_data_19_1 = read_xlsx('project/data/2019/2019년 1월.xlsx')
#########################################################
str(pm_data_19_1)
head(pm_data_19_1, 10)
pm_seoul = rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4)
pm_seoul = rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4)
pm_data_19_1 = pm_data_19_1[c(-2, -3, -4, -12)]
pm_data_19_2 = pm_data_19_2[c(-2, -3, -4, -12)]
pm_data_19_3 = pm_data_19_3[c(-2, -3, -4, -12)]
pm_data_19_4 = pm_data_19_4[c(-2, -3, -4, -12)]
rm(list = ls())
pm_data_19_1 = read_xlsx('project/data/2019/2019년 1월.xlsx')
pm_data_19_2 = read_xlsx('project/data/2019/2019년 2월.xlsx')
pm_data_19_3 = read_xlsx('project/data/2019/2019년 3월.xlsx')
pm_data_19_4 = read_xlsx('project/data/2019/2019년 4월.xlsx')
# 날씨 데이터
weather_19 = read.csv('project/data/2019/2019기상청.csv')
pm_data_19_1 = pm_data_19_1[c(-2, -3, -4, -12)]
pm_data_19_2 = pm_data_19_2[c(-2, -3, -4, -12)]
pm_data_19_3 = pm_data_19_3[c(-2, -3, -4, -12)]
pm_data_19_4 = pm_data_19_4[c(-2, -3, -4, -12)]
knitr::opts_chunk$set(echo = T, fig.align = 'center', message = F, warning = F, fig.height = 8, cache = T, dpi = 300)
library(readxl)
library(knitr)
library(dplyr)
library(ggplot2)
library(gmodels)
library(psych)
library(corrplot)
library(caret)
library(ggthemes)
library(neuralnet)
library(rpart)
library(rpart.plot)
library(Cubist)
library(xts)
library(dygraphs)
library(tidyverse)
library(PKPDdatasets)
library(class)
library(C50)
library(e1071)
library(pROC)
str(pm_data_19_1)
pm_seoul = rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4)
str(pm_seoul)
pm_data_19_1 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 1월.xlsx')
pm_data_19_2 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 2월.xlsx')
pm_data_19_3 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 3월.xlsx')
pm_data_19_4 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 4월.xlsx')
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
str(pm_data_19_1)
pm_seoul = as.data.frame(rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4))
str(pm_seoul)
pm_seoul = as.data.frame(rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4))
str(pm_seoul)
```{r}
rm(list = ls())
pm_data_19_1 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 1월.xlsx')
pm_data_19_2 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 2월.xlsx')
pm_data_19_3 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 3월.xlsx')
pm_data_19_4 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 4월.xlsx')
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
pm_seoul = as.data.frame(rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4))
str(pm_seoul)
pm_seoul = pm_seoul[c(-2, -3, -4, -12)]
str(pm_seoul)
str(pm_seoul)
weather_19 = weather_19 %>% rename('time' = '일시',
'w_office' = '지점',
'w_temp' = '기온..C.',
'w_rain' = '강수량.mm.',
'w_wspeed' = '풍속.m.s.',
'w_wdir' = '풍향.16방위.',
'w_hum' = '습도...',
'w_vprprssr' = '증기압.hPa.',
'w_athmprsssr' = '현지기압.hPa.')
pm_seoul = na.omit(pm_seoul)
pm_seoul = pm_seoul %>% filter(region %in% c('서울 중구', '서울 용산구', '서울 종로구', '서울 중구 청', '서울 광진구',
'서울 성동구', '서울 중랑구', '서울 동대문구', '서울 성북구', '서울 도봉구',
'서울 은평구', '서울 서대문구', '서울 마포구', '서울 강서로', '서울 강서구',
'서울 구로구', '서울 영등포구', '서울 동작구', '서울 관악구', '서울 강남구',
'서울 서초구', '서울 송파구', '서울 강동구', '서울 금천구', '서울 강북구',
'서울 양천구', '서울 노원구'))
str(pm_seoul)
pm_seoul = pm_seoul %>% rename('time'     = '측정일시',
'region'   = '지역')
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
str(weather_19)
pm_seoul = pm_seoul %>% filter(region %in% c('서울 중구', '서울 용산구', '서울 종로구', '서울 중구 청', '서울 광진구',
'서울 성동구', '서울 중랑구', '서울 동대문구', '서울 성북구', '서울 도봉구',
'서울 은평구', '서울 서대문구', '서울 마포구', '서울 강서로', '서울 강서구',
'서울 구로구', '서울 영등포구', '서울 동작구', '서울 관악구', '서울 강남구',
'서울 서초구', '서울 송파구', '서울 강동구', '서울 금천구', '서울 강북구',
'서울 양천구', '서울 노원구'))
str(pm_seoul)
str(pm_seoul)
x =
x = as.POSIXct(format(pm_seoul$time, format = "%Y%m%d%H"), format = "%Y%m%d%H")
str(x)
pm_seoul$time = as.POSIXct(format(pm_seoul$time, format = "%Y%m%d%H"), format = "%Y%m%d%H")
str(pm_seoul)
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
str(pm_seoul)
str(weather_19)
rm(list = ls())
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
pm_seoul$region = ifelse(pm_seoul$region == '서울 중구 청', '서울 중구', pm_seoul$region)
knitr::opts_chunk$set(echo = T, fig.align = 'center', message = F, warning = F, fig.height = 6, cache = T, dpi = 300)
```{r}
pm_data_19_1 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 1월.xlsx')
pm_data_19_2 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 2월.xlsx')
pm_data_19_3 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 3월.xlsx')
pm_data_19_4 = read_xlsx('C:/dev/lab-r/project/data/2019/2019년 4월.xlsx')
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
str(pm_data_19_1)
str(weather_19)
pm_seoul = as.data.frame(rbind(pm_data_19_1, pm_data_19_2, pm_data_19_3, pm_data_19_4))
pm_seoul = pm_seoul[c(-2, -3, -4, -12)]
pm_seoul = na.omit(pm_seoul)
pm_seoul = pm_seoul %>% rename('time'     = '측정일시',
'region'   = '지역')
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
weather_19 = weather_19[-9]
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
weather_19 = na.omit(weather_19)
pm_seoul$region = ifelse(pm_seoul$region == '서울 중구 청', '서울 중구', pm_seoul$region)
pm_seoul = pm_seoul %>%
filter(region %in% c('서울 중구', '서울 용산구', '서울 종로구', '서울 중구',
'서울 광진구', '서울 성동구', '서울 중랑구', '서울 동대문구',
'서울 성북구', '서울 도봉구', '서울 은평구', '서울 서대문구',
'서울 마포구', '서울 강서로', '서울 강서구', '서울 구로구',
'서울 영등포구', '서울 동작구', '서울 관악구', '서울 강남구',
'서울 서초구', '서울 송파구', '서울 강동구', '서울 금천구',
'서울 강북구', '서울 양천구', '서울 노원구'))
pm_seoul$time = as.POSIXct(format(pm_seoul$time, format = "%Y%m%d%H"), format = "%Y%m%d%H")
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
str(pm_seoul)
str(weather_19)
df = left_join(pm_seoul, weather_19, by = 'time')
df = na.omit(df)
df$PM10_t = ifelse(df$PM10 <= 30, 1,
ifelse(df$PM10 <= 80, 2,
ifelse(df$PM10 <= 150, 3,
ifelse(df$PM10 > 150, 4, 0))))
df$PM10_t = factor(df$PM10_t,
levels = c(1:4),
labels = c('good', 'fair', 'poor', 'very poor'))
str(df)
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
weather_19 = weather_19[c(-2, -9)]
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
weather_19 = na.omit(weather_19)
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
str(weather_19)
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
str(weather_19)
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
weather_19 = weather_19[c(-1, -9)]
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
weather_19 = na.omit(weather_19)
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
df = left_join(pm_seoul, weather_19, by = 'time')
df = na.omit(df)
df$PM10_t = ifelse(df$PM10 <= 30, 1,
ifelse(df$PM10 <= 80, 2,
ifelse(df$PM10 <= 150, 3,
ifelse(df$PM10 > 150, 4, 0))))
df$PM10_t = factor(df$PM10_t,
levels = c(1:4),
labels = c('good', 'fair', 'poor', 'very poor'))
str(df)
df_norm = as.data.frame(lapply(df[c(-1, -2, -15), normalize))
df_norm = as.data.frame(lapply(df[c(-1, -2, -15)], normalize))
normalize = function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
df_norm = as.data.frame(lapply(df[c(-1, -2, -15)], normalize))
str(df_norm)
summary(df_norm)
str(df)
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
weather_19 = weather_19[c(-1, -2, -9)]
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
weather_19 = na.omit(weather_19)
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
str(weather_19)
weather_19 = read.csv('C:/dev/lab-r/project/data/2019/2019기상청.csv')
weather_19 = weather_19 %>% rename('time'          = '일시',
'w_office'      = '지점',
'w_temp'        = '기온..C.',
'w_rain'        = '강수량.mm.',
'w_wspeed'      = '풍속.m.s.',
'w_wdir'        = '풍향.16방위.',
'w_hum'         = '습도...',
'w_vprprssr'    = '증기압.hPa.',
'w_athmprsssr'  = '현지기압.hPa.')
weather_19 = weather_19[c(-1, -9)]
weather_19$w_rain = ifelse(is.na(weather_19$w_rain), 0, weather_19$w_rain)
weather_19 = na.omit(weather_19)
str(weather_19)
weather_19$time = as.POSIXct(weather_19$time, format = "%Y-%m-%d %H")
str(weather_19)
df = left_join(pm_seoul, weather_19, by = 'time')
df = na.omit(df)
df$PM10_t = ifelse(df$PM10 <= 30, 1,
ifelse(df$PM10 <= 80, 2,
ifelse(df$PM10 <= 150, 3,
ifelse(df$PM10 > 150, 4, 0))))
df$PM10_t = factor(df$PM10_t,
levels = c(1:4),
labels = c('good', 'fair', 'poor', 'very poor'))
str(df)
str(weather_19)
unlink('C:/Users/user/Desktop/project_cache', recursive = TRUE)
rm(list = ls)
rm(list = ls)
mpg
mpg = as.data.frame(ggplot2::mpg)
mpg
write.csv('mpg')
write.csv()
write.csv(mpg, 'mpg')
write.csv(mpg, 'mpg')
write.csv(mpg, '')
write.csv(mpg, 'mpg.csv')
View(mpg)
library(dplyr)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point() +
stat_smooth(method = lm, level = 0.95)
library(dplyr)
library(ggplot2)
rm(list = ls())
library(dplyr)
library(ggplot2)
mpg = as.data.frame(ggplot2::mpg)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point() +
stat_smooth(method = lm, level = 0.95)
linear_model = lm(formula =  = cty ~ displ, data = mpg)
linear_model = lm(formula = cty ~ displ, data = mpg)
print(linear_model)
write.csv(x = mpg, 'G:\내 드라이브\dev\lab-python\scratch08\mpg.csv',
write.csv(x = mpg, 'G:/내 드라이브/dev/lab-python/scratch08/mpg.csv',
write.csv(x = mpg, 'G:/내 드라이브/dev/lab-python/scratch08/mpg.csv',
row.names = F,
fileEncoding = 'UTF-8')
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(dplyr)
library(ggplot2)
linear_model = lm(formula = cty ~ displ, data = mpg)
print(linear_model)
mpg = as.data.frame(ggplot2::mpg)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point() +
stat_smooth(method = lm, level = 0.95)
